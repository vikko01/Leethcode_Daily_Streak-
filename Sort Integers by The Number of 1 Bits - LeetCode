class Solution {
    public int[] sortByBits(int[] arr) {
            Integer[] boxedArr = new Integer[arr.length];
        for (int i = 0; i < arr.length; i++) {
            boxedArr[i] = arr[i];
        }

        // Create a custom comparator to sort by the number of 1's
        Comparator<Integer> customComparator = new Comparator<Integer>() {
            @Override
            public int compare(Integer a, Integer b) {
                int countA = Integer.bitCount(a);
                int countB = Integer.bitCount(b);

                // If the number of 1's is the same, sort by the integer value itself
                if (countA == countB) {
                    return a - b;
                } else {
                    return countA - countB;
                }
            }
        };

        // Sort the array using the custom comparator
        Arrays.sort(boxedArr, customComparator);

        // Convert back to primitive int array
        for (int i = 0; i < arr.length; i++) {
            arr[i] = boxedArr[i];
        }

        return arr; 
    }
}
